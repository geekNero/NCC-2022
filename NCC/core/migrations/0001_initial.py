# Generated by Django 4.1.1 on 2022-09-19 18:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('total_score', models.IntegerField(default=0, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1003, null=True)),
                ('cid', models.CharField(max_length=1003, null=True)),
                ('active', models.BooleanField(default=False, null=True)),
                ('status', models.BooleanField(default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1003, null=True)),
                ('body', models.TextField(null=True)),
                ('description', models.CharField(max_length=1003, null=True)),
                ('input_format', models.TextField(null=True)),
                ('output_format', models.TextField(null=True)),
                ('constraints', models.TextField(null=True)),
                ('sample_input', models.TextField(null=True)),
                ('sample_output', models.TextField(null=True)),
                ('explaination', models.TextField(null=True)),
                ('correct_submissions', models.IntegerField(null=True)),
                ('total_submissions', models.IntegerField(null=True)),
                ('accuracy', models.FloatField(null=True)),
                ('time_limt', models.IntegerField(default=1, null=True)),
                ('memory_limit', models.IntegerField(default=100000000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SetTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('final_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='testcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tc_input', models.FileField(null=True, upload_to='Question_Data/Input')),
                ('tc_output', models.FileField(null=True, upload_to='Question_Data/Output')),
                ('q_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('code', models.TextField(null=True)),
                ('status', models.CharField(choices=[('WA', 'Wrong Answer'), ('AC', 'Accepted'), ('TLE', 'Time Limit Exceeded'), ('CTE', 'Compile Time Error'), ('RE', 'Runtime Error'), ('MLE', 'Memory Limit Exceeded')], max_length=20, null=True)),
                ('language', models.CharField(choices=[('c', 'C'), ('cpp', 'C++'), ('py', 'Python')], max_length=10, null=True)),
                ('p_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('q_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
        ),
        migrations.CreateModel(
            name='Question_Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, null=True)),
                ('status', models.CharField(choices=[('NA', 'Not Attempted'), ('WA', 'Wrong Answer'), ('AC', 'Accepted'), ('TLE', 'Time Limit Exceeded'), ('CTE', 'Compile Time Error'), ('RE', 'Runtime Error'), ('MLE', 'Memory Limit Exceeded')], default='Not Attempted', max_length=20, null=True)),
                ('p_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('q_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
        ),
    ]
